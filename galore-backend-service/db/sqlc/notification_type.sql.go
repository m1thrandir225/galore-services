// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notification_type.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createNotificationType = `-- name: CreateNotificationType :one
INSERT INTO notification_types (
  title,
  content,
  tag
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, title, content, tag, created_at
`

type CreateNotificationTypeParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Tag     string `json:"tag"`
}

func (q *Queries) CreateNotificationType(ctx context.Context, arg CreateNotificationTypeParams) (NotificationType, error) {
	row := q.db.QueryRow(ctx, createNotificationType, arg.Title, arg.Content, arg.Tag)
	var i NotificationType
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotificationType = `-- name: DeleteNotificationType :exec
DELETE from notification_types 
WHERE id = $1
`

func (q *Queries) DeleteNotificationType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteNotificationType, id)
	return err
}

const getAllTypes = `-- name: GetAllTypes :many
SELECT id, title, content, tag, created_at from notification_types
`

func (q *Queries) GetAllTypes(ctx context.Context) ([]NotificationType, error) {
	rows, err := q.db.Query(ctx, getAllTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NotificationType{}
	for rows.Next() {
		var i NotificationType
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Tag,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationType = `-- name: GetNotificationType :one
SELECT id, title, content, tag, created_at from notification_types
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNotificationType(ctx context.Context, id uuid.UUID) (NotificationType, error) {
	row := q.db.QueryRow(ctx, getNotificationType, id)
	var i NotificationType
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}

const updateNotificationType = `-- name: UpdateNotificationType :one
UPDATE notification_types
SET title = $2, content = $3, tag = $4
WHERE id = $1
RETURNING id, title, content, tag, created_at
`

type UpdateNotificationTypeParams struct {
	ID      uuid.UUID `json:"id"`
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Tag     string    `json:"tag"`
}

func (q *Queries) UpdateNotificationType(ctx context.Context, arg UpdateNotificationTypeParams) (NotificationType, error) {
	row := q.db.QueryRow(ctx, updateNotificationType,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Tag,
	)
	var i NotificationType
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}
