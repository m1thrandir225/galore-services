// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hotp_counter.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const cleanupExpiredCounters = `-- name: CleanupExpiredCounters :exec
DELETE FROM hotp_counters
WHERE last_used < NOW() - INTERVAL '30 days'
`

func (q *Queries) CleanupExpiredCounters(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupExpiredCounters)
	return err
}

const createHotpCounter = `-- name: CreateHotpCounter :exec
INSERT INTO hotp_counters (user_id, counter)
VALUES ($1, $2)
ON CONFLICT (user_id) DO NOTHING
`

type CreateHotpCounterParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Counter int32     `json:"counter"`
}

func (q *Queries) CreateHotpCounter(ctx context.Context, arg CreateHotpCounterParams) error {
	_, err := q.db.Exec(ctx, createHotpCounter, arg.UserID, arg.Counter)
	return err
}

const getCurrentCounter = `-- name: GetCurrentCounter :one
SELECT counter
FROM hotp_counters
WHERE user_id = $1
`

func (q *Queries) GetCurrentCounter(ctx context.Context, userID uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, getCurrentCounter, userID)
	var counter int32
	err := row.Scan(&counter)
	return counter, err
}

const increaseCounter = `-- name: IncreaseCounter :one
UPDATE hotp_counters
SET counter = counter + 1, last_used = NOW()
WHERE user_id = $1
RETURNING user_id, counter, last_used
`

func (q *Queries) IncreaseCounter(ctx context.Context, userID uuid.UUID) (HotpCounter, error) {
	row := q.db.QueryRow(ctx, increaseCounter, userID)
	var i HotpCounter
	err := row.Scan(&i.UserID, &i.Counter, &i.LastUsed)
	return i, err
}
