// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  name,
  tag
) VALUES (
  $1,
  $2
) RETURNING id, name, tag, created_at
`

type CreateCategoryParams struct {
	Name string `json:"name"`
	Tag  string `json:"tag"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Tag)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, tag, created_at FROM categories
ORDER BY created_at DESC
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tag,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, tag, created_at FROM categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategoryById(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}

const getCategoryByTag = `-- name: GetCategoryByTag :one
SELECT id, name, tag, created_at FROM categories
WHERE tag = $1 LIMIT 1
`

func (q *Queries) GetCategoryByTag(ctx context.Context, tag string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByTag, tag)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $2, tag = $3
WHERE id = $1
RETURNING id, name, tag, created_at
`

type UpdateCategoryParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Tag  string    `json:"tag"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Name, arg.Tag)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.CreatedAt,
	)
	return i, err
}
