// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: daily_featured.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	dto "github.com/m1thrandir225/galore-services/dto"
	"github.com/pgvector/pgvector-go"
)

const deleteOlderFeatured = `-- name: DeleteOlderFeatured :exec
DELETE FROM daily_featured_cocktails
WHERE created_at < NOW() - INTERVAL '7 days'
`

func (q *Queries) DeleteOlderFeatured(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOlderFeatured)
	return err
}

const generateFeaturedForToday = `-- name: GenerateFeaturedForToday :many
WITH today_featured AS (
    SELECT COUNT(*) AS count
    FROM daily_featured_cocktails
    WHERE DATE(created_at) = CURRENT_DATE
),
     not_recently_featured AS (
         SELECT c.id
         FROM cocktails c
         WHERE NOT EXISTS (
             SELECT 1
             FROM daily_featured_cocktails df
             WHERE df.cocktail_id = c.id
               AND df.created_at > CURRENT_DATE - INTERVAL '7 days'
         )
     )
INSERT INTO daily_featured_cocktails (cocktail_id)
SELECT random_cocktails.id
FROM (
         SELECT nrf.id
         FROM not_recently_featured nrf
         ORDER BY RANDOM()
         LIMIT 10
     ) random_cocktails
WHERE (SELECT count FROM today_featured) < 10
RETURNING id, cocktail_id, created_at
`

func (q *Queries) GenerateFeaturedForToday(ctx context.Context) ([]DailyFeaturedCocktail, error) {
	rows, err := q.db.Query(ctx, generateFeaturedForToday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DailyFeaturedCocktail{}
	for rows.Next() {
		var i DailyFeaturedCocktail
		if err := rows.Scan(&i.ID, &i.CocktailID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyFeatured = `-- name: GetDailyFeatured :many
SELECT c.id,
       c.name,
       c.is_alcoholic,
       c.glass,
       c.image,
       c.embedding,
       c.instructions,
       c.ingredients,
       c.created_at
FROM cocktails c
JOIN daily_featured_cocktails dfc ON dfc.cocktail_id = c.id
WHERE dfc.created_at >= CURRENT_DATE
  AND dfc.created_at < CURRENT_DATE + INTERVAL '1 day'
`

type GetDailyFeaturedRow struct {
	ID           uuid.UUID         `json:"id"`
	Name         string            `json:"name"`
	IsAlcoholic  pgtype.Bool       `json:"is_alcoholic"`
	Glass        string            `json:"glass"`
	Image        string            `json:"image"`
	Embedding    pgvector.Vector   `json:"embedding"`
	Instructions string            `json:"instructions"`
	Ingredients  dto.IngredientDto `json:"ingredients"`
	CreatedAt    time.Time         `json:"created_at"`
}

func (q *Queries) GetDailyFeatured(ctx context.Context) ([]GetDailyFeaturedRow, error) {
	rows, err := q.db.Query(ctx, getDailyFeatured)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDailyFeaturedRow{}
	for rows.Next() {
		var i GetDailyFeaturedRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsAlcoholic,
			&i.Glass,
			&i.Image,
			&i.Embedding,
			&i.Instructions,
			&i.Ingredients,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
