// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	dto "github.com/m1thrandir225/galore-services/dto"
	"github.com/pgvector/pgvector-go"
)

type GenerationStatus string

const (
	GenerationStatusGeneratingCocktail GenerationStatus = "generating_cocktail"
	GenerationStatusGeneratingImages   GenerationStatus = "generating_images"
	GenerationStatusError              GenerationStatus = "error"
	GenerationStatusSuccess            GenerationStatus = "success"
)

func (e *GenerationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenerationStatus(s)
	case string:
		*e = GenerationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GenerationStatus: %T", src)
	}
	return nil
}

type NullGenerationStatus struct {
	GenerationStatus GenerationStatus `json:"generation_status"`
	Valid            bool             `json:"valid"` // Valid is true if GenerationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenerationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GenerationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenerationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenerationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenerationStatus), nil
}

type ImageGenerationStatus string

const (
	ImageGenerationStatusGenerating ImageGenerationStatus = "generating"
	ImageGenerationStatusSuccess    ImageGenerationStatus = "success"
	ImageGenerationStatusError      ImageGenerationStatus = "error"
	ImageGenerationStatusCancelled  ImageGenerationStatus = "cancelled"
)

func (e *ImageGenerationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageGenerationStatus(s)
	case string:
		*e = ImageGenerationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageGenerationStatus: %T", src)
	}
	return nil
}

type NullImageGenerationStatus struct {
	ImageGenerationStatus ImageGenerationStatus `json:"image_generation_status"`
	Valid                 bool                  `json:"valid"` // Valid is true if ImageGenerationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageGenerationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ImageGenerationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageGenerationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageGenerationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageGenerationStatus), nil
}

type UserRoles string

const (
	UserRolesUser  UserRoles = "user"
	UserRolesAdmin UserRoles = "admin"
)

func (e *UserRoles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRoles(s)
	case string:
		*e = UserRoles(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRoles: %T", src)
	}
	return nil
}

type NullUserRoles struct {
	UserRoles UserRoles `json:"user_roles"`
	Valid     bool      `json:"valid"` // Valid is true if UserRoles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRoles) Scan(value interface{}) error {
	if value == nil {
		ns.UserRoles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRoles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRoles), nil
}

type Category struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Tag       string    `json:"tag"`
	CreatedAt time.Time `json:"created_at"`
}

type CategoryFlavour struct {
	ID         uuid.UUID `json:"id"`
	CategoryID uuid.UUID `json:"category_id"`
	FlavourID  uuid.UUID `json:"flavour_id"`
}

type Cocktail struct {
	ID           uuid.UUID         `json:"id"`
	Name         string            `json:"name"`
	IsAlcoholic  pgtype.Bool       `json:"is_alcoholic"`
	Glass        string            `json:"glass"`
	Image        string            `json:"image"`
	Instructions string            `json:"instructions"`
	Ingredients  dto.IngredientDto `json:"ingredients"`
	Embedding    pgvector.Vector   `json:"embedding"`
	CreatedAt    time.Time         `json:"created_at"`
}

type CocktailCategory struct {
	ID         uuid.UUID `json:"id"`
	CocktailID uuid.UUID `json:"cocktail_id"`
	CategoryID uuid.UUID `json:"category_id"`
}

type DailyFeaturedCocktail struct {
	ID         uuid.UUID `json:"id"`
	CocktailID uuid.UUID `json:"cocktail_id"`
	CreatedAt  time.Time `json:"created_at"`
}

type FcmToken struct {
	ID        uuid.UUID `json:"id"`
	Token     string    `json:"token"`
	DeviceID  string    `json:"device_id"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
}

type Flavour struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

type GenerateCocktailDraft struct {
	ID              uuid.UUID          `json:"id"`
	RequestID       uuid.UUID          `json:"request_id"`
	Name            string             `json:"name"`
	Description     string             `json:"description"`
	Instructions    []byte             `json:"instructions"`
	Ingredients     []byte             `json:"ingredients"`
	MainImagePrompt string             `json:"main_image_prompt"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

type GenerateCocktailRequest struct {
	ID           uuid.UUID        `json:"id"`
	UserID       uuid.UUID        `json:"user_id"`
	Prompt       string           `json:"prompt"`
	Status       GenerationStatus `json:"status"`
	ErrorMessage pgtype.Text      `json:"error_message"`
	UpdatedAt    time.Time        `json:"updated_at"`
	CreatedAt    time.Time        `json:"created_at"`
}

type GenerateImageRequest struct {
	ID           uuid.UUID             `json:"id"`
	DraftID      uuid.UUID             `json:"draft_id"`
	Prompt       string                `json:"prompt"`
	IsMain       bool                  `json:"is_main"`
	Status       ImageGenerationStatus `json:"status"`
	ImageUrl     pgtype.Text           `json:"image_url"`
	ErrorMessage pgtype.Text           `json:"error_message"`
	CreatedAt    pgtype.Timestamptz    `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz    `json:"updated_at"`
}

type GeneratedCocktail struct {
	ID           uuid.UUID            `json:"id"`
	UserID       uuid.UUID            `json:"user_id"`
	RequestID    uuid.UUID            `json:"request_id"`
	DraftID      uuid.UUID            `json:"draft_id"`
	Name         string               `json:"name"`
	Description  string               `json:"description"`
	MainImageUrl string               `json:"main_image_url"`
	Instructions dto.AiInstructionDto `json:"instructions"`
	Ingredients  dto.IngredientDto    `json:"ingredients"`
	CreatedAt    time.Time            `json:"created_at"`
}

type HotpCounter struct {
	UserID   uuid.UUID `json:"user_id"`
	Counter  int32     `json:"counter"`
	LastUsed time.Time `json:"last_used"`
}

type LikedCocktail struct {
	ID         uuid.UUID `json:"id"`
	CocktailID uuid.UUID `json:"cocktail_id"`
	UserID     uuid.UUID `json:"user_id"`
}

type LikedFlavour struct {
	FlavourID uuid.UUID `json:"flavour_id"`
	UserID    uuid.UUID `json:"user_id"`
}

type Notification struct {
	ID                 uuid.UUID `json:"id"`
	UserID             uuid.UUID `json:"user_id"`
	NotificationTypeID uuid.UUID `json:"notification_type_id"`
	Opened             bool      `json:"opened"`
	CreatedAt          time.Time `json:"created_at"`
}

type NotificationType struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	Tag       string    `json:"tag"`
	CreatedAt time.Time `json:"created_at"`
}

type ResetPasswordRequest struct {
	ID            uuid.UUID          `json:"id"`
	UserID        uuid.UUID          `json:"user_id"`
	PasswordReset bool               `json:"password_reset"`
	ValidUntil    pgtype.Timestamptz `json:"valid_until"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	ID                        uuid.UUID   `json:"id"`
	Email                     string      `json:"email"`
	Name                      string      `json:"name"`
	Password                  string      `json:"password"`
	AvatarUrl                 string      `json:"avatar_url"`
	Role                      UserRoles   `json:"role"`
	HotpSecret                string      `json:"hotp_secret"`
	EnabledPushNotifications  bool        `json:"enabled_push_notifications"`
	EnabledEmailNotifications bool        `json:"enabled_email_notifications"`
	Birthday                  pgtype.Date `json:"birthday"`
	CreatedAt                 time.Time   `json:"created_at"`
}
