// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/galore-services/categorizer_service (interfaces: CategorizerService)
//
// Generated by this command:
//
//	mockgen -package mockcategorize -destination categorizer_service/mock/categorizer.go github.com/m1thrandir225/galore-services/categorizer_service CategorizerService
//

// Package mockcategorize is a generated GoMock package.
package mockcategorize

import (
	reflect "reflect"

	db "github.com/m1thrandir225/galore-services/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockCategorizerService is a mock of CategorizerService interface.
type MockCategorizerService struct {
	ctrl     *gomock.Controller
	recorder *MockCategorizerServiceMockRecorder
}

// MockCategorizerServiceMockRecorder is the mock recorder for MockCategorizerService.
type MockCategorizerServiceMockRecorder struct {
	mock *MockCategorizerService
}

// NewMockCategorizerService creates a new mock instance.
func NewMockCategorizerService(ctrl *gomock.Controller) *MockCategorizerService {
	mock := &MockCategorizerService{ctrl: ctrl}
	mock.recorder = &MockCategorizerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategorizerService) EXPECT() *MockCategorizerServiceMockRecorder {
	return m.recorder
}

// CategorizeCocktail mocks base method.
func (m *MockCategorizerService) CategorizeCocktail(arg0 db.Cocktail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategorizeCocktail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CategorizeCocktail indicates an expected call of CategorizeCocktail.
func (mr *MockCategorizerServiceMockRecorder) CategorizeCocktail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategorizeCocktail", reflect.TypeOf((*MockCategorizerService)(nil).CategorizeCocktail), arg0)
}
