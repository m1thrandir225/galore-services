// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/galore-services/cocktail_gen (interfaces: CocktailGenerator)
//
// Generated by this command:
//
//	mockgen -package mockcocktailgen -destination cocktail_gen/mock/cocktail_gen.go github.com/m1thrandir225/galore-services/cocktail_gen CocktailGenerator
//

// Package mockcocktailgen is a generated GoMock package.
package mockcocktailgen

import (
	reflect "reflect"

	cocktail_gen "github.com/m1thrandir225/galore-services/cocktail_gen"
	gomock "go.uber.org/mock/gomock"
)

// MockCocktailGenerator is a mock of CocktailGenerator interface.
type MockCocktailGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCocktailGeneratorMockRecorder
}

// MockCocktailGeneratorMockRecorder is the mock recorder for MockCocktailGenerator.
type MockCocktailGeneratorMockRecorder struct {
	mock *MockCocktailGenerator
}

// NewMockCocktailGenerator creates a new mock instance.
func NewMockCocktailGenerator(ctrl *gomock.Controller) *MockCocktailGenerator {
	mock := &MockCocktailGenerator{ctrl: ctrl}
	mock.recorder = &MockCocktailGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCocktailGenerator) EXPECT() *MockCocktailGeneratorMockRecorder {
	return m.recorder
}

// GenerateRecipe mocks base method.
func (m *MockCocktailGenerator) GenerateRecipe(arg0, arg1 []string) (*cocktail_gen.PromptRecipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRecipe", arg0, arg1)
	ret0, _ := ret[0].(*cocktail_gen.PromptRecipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRecipe indicates an expected call of GenerateRecipe.
func (mr *MockCocktailGeneratorMockRecorder) GenerateRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRecipe", reflect.TypeOf((*MockCocktailGenerator)(nil).GenerateRecipe), arg0, arg1)
}
