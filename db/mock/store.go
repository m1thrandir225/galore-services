// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/galore-services/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/m1thrandir225/galore-services/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/m1thrandir225/galore-services/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateFlavour mocks base method.
func (m *MockStore) CreateFlavour(arg0 context.Context, arg1 string) (db.Flavour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlavour", arg0, arg1)
	ret0, _ := ret[0].(db.Flavour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlavour indicates an expected call of CreateFlavour.
func (mr *MockStoreMockRecorder) CreateFlavour(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlavour", reflect.TypeOf((*MockStore)(nil).CreateFlavour), arg0, arg1)
}

// CreateNotifcationType mocks base method.
func (m *MockStore) CreateNotifcationType(arg0 context.Context, arg1 db.CreateNotifcationTypeParams) (db.NotificationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotifcationType", arg0, arg1)
	ret0, _ := ret[0].(db.NotificationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotifcationType indicates an expected call of CreateNotifcationType.
func (mr *MockStoreMockRecorder) CreateNotifcationType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotifcationType", reflect.TypeOf((*MockStore)(nil).CreateNotifcationType), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.CreateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserCocktail mocks base method.
func (m *MockStore) CreateUserCocktail(arg0 context.Context, arg1 db.CreateUserCocktailParams) (db.CreatedCocktail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCocktail", arg0, arg1)
	ret0, _ := ret[0].(db.CreatedCocktail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserCocktail indicates an expected call of CreateUserCocktail.
func (mr *MockStoreMockRecorder) CreateUserCocktail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCocktail", reflect.TypeOf((*MockStore)(nil).CreateUserCocktail), arg0, arg1)
}

// DeleteFlavour mocks base method.
func (m *MockStore) DeleteFlavour(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlavour", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlavour indicates an expected call of DeleteFlavour.
func (mr *MockStoreMockRecorder) DeleteFlavour(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlavour", reflect.TypeOf((*MockStore)(nil).DeleteFlavour), arg0, arg1)
}

// DeleteNotificationType mocks base method.
func (m *MockStore) DeleteNotificationType(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotificationType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotificationType indicates an expected call of DeleteNotificationType.
func (mr *MockStoreMockRecorder) DeleteNotificationType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationType", reflect.TypeOf((*MockStore)(nil).DeleteNotificationType), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockStore) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockStoreMockRecorder) DeleteSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockStore)(nil).DeleteSession), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserCocktail mocks base method.
func (m *MockStore) DeleteUserCocktail(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserCocktail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserCocktail indicates an expected call of DeleteUserCocktail.
func (mr *MockStoreMockRecorder) DeleteUserCocktail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserCocktail", reflect.TypeOf((*MockStore)(nil).DeleteUserCocktail), arg0, arg1)
}

// GetAllTypes mocks base method.
func (m *MockStore) GetAllTypes(arg0 context.Context) ([]db.NotificationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTypes", arg0)
	ret0, _ := ret[0].([]db.NotificationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTypes indicates an expected call of GetAllTypes.
func (mr *MockStoreMockRecorder) GetAllTypes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTypes", reflect.TypeOf((*MockStore)(nil).GetAllTypes), arg0)
}

// GetCreatedCocktails mocks base method.
func (m *MockStore) GetCreatedCocktails(arg0 context.Context, arg1 uuid.UUID) ([]db.CreatedCocktail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedCocktails", arg0, arg1)
	ret0, _ := ret[0].([]db.CreatedCocktail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatedCocktails indicates an expected call of GetCreatedCocktails.
func (mr *MockStoreMockRecorder) GetCreatedCocktails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedCocktails", reflect.TypeOf((*MockStore)(nil).GetCreatedCocktails), arg0, arg1)
}

// GetFlavourId mocks base method.
func (m *MockStore) GetFlavourId(arg0 context.Context, arg1 uuid.UUID) (db.Flavour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavourId", arg0, arg1)
	ret0, _ := ret[0].(db.Flavour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlavourId indicates an expected call of GetFlavourId.
func (mr *MockStoreMockRecorder) GetFlavourId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavourId", reflect.TypeOf((*MockStore)(nil).GetFlavourId), arg0, arg1)
}

// GetFlavourName mocks base method.
func (m *MockStore) GetFlavourName(arg0 context.Context, arg1 string) (db.Flavour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavourName", arg0, arg1)
	ret0, _ := ret[0].(db.Flavour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlavourName indicates an expected call of GetFlavourName.
func (mr *MockStoreMockRecorder) GetFlavourName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavourName", reflect.TypeOf((*MockStore)(nil).GetFlavourName), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserCocktail mocks base method.
func (m *MockStore) GetUserCocktail(arg0 context.Context, arg1 uuid.UUID) (db.CreatedCocktail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCocktail", arg0, arg1)
	ret0, _ := ret[0].(db.CreatedCocktail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCocktail indicates an expected call of GetUserCocktail.
func (mr *MockStoreMockRecorder) GetUserCocktail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCocktail", reflect.TypeOf((*MockStore)(nil).GetUserCocktail), arg0, arg1)
}

// GetUserFCMTokens mocks base method.
func (m *MockStore) GetUserFCMTokens(arg0 context.Context, arg1 uuid.UUID) ([]db.FcmToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFCMTokens", arg0, arg1)
	ret0, _ := ret[0].([]db.FcmToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFCMTokens indicates an expected call of GetUserFCMTokens.
func (mr *MockStoreMockRecorder) GetUserFCMTokens(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFCMTokens", reflect.TypeOf((*MockStore)(nil).GetUserFCMTokens), arg0, arg1)
}

// UpdateFlavour mocks base method.
func (m *MockStore) UpdateFlavour(arg0 context.Context, arg1 db.UpdateFlavourParams) (db.Flavour, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlavour", arg0, arg1)
	ret0, _ := ret[0].(db.Flavour)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlavour indicates an expected call of UpdateFlavour.
func (mr *MockStoreMockRecorder) UpdateFlavour(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlavour", reflect.TypeOf((*MockStore)(nil).UpdateFlavour), arg0, arg1)
}
