// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  name,
  password,
  avatar_url
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, email, name, password, avatar_url, enabled_push_notifications, enabled_email_notifications, created_at
`

type CreateUserParams struct {
	Email     string `json:"email"`
	Name      string `json:"name"`
	Password  string `json:"password"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.AvatarUrl,
		&i.EnabledPushNotifications,
		&i.EnabledEmailNotifications,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1 
RETURNING id, email, name, password, avatar_url, enabled_push_notifications, enabled_email_notifications, created_at
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, password, avatar_url, enabled_push_notifications, enabled_email_notifications, created_at FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.AvatarUrl,
		&i.EnabledPushNotifications,
		&i.EnabledEmailNotifications,
		&i.CreatedAt,
	)
	return i, err
}
