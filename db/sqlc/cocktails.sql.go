// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cocktails.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	dto "github.com/m1thrandir225/galore-services/dto"
)

const createCocktail = `-- name: CreateCocktail :one
INSERT INTO cocktails (
  name,
  is_alcoholic,
  glass,
  image,
  instructions,
  ingredients
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, name, is_alcoholic, glass, image, instructions, ingredients, created_at
`

type CreateCocktailParams struct {
	Name         string             `json:"name"`
	IsAlcoholic  pgtype.Bool        `json:"is_alcoholic"`
	Glass        string             `json:"glass"`
	Image        string             `json:"image"`
	Instructions dto.InstructionDto `json:"instructions"`
	Ingredients  dto.IngredientDto  `json:"ingredients"`
}

func (q *Queries) CreateCocktail(ctx context.Context, arg CreateCocktailParams) (Cocktail, error) {
	row := q.db.QueryRow(ctx, createCocktail,
		arg.Name,
		arg.IsAlcoholic,
		arg.Glass,
		arg.Image,
		arg.Instructions,
		arg.Ingredients,
	)
	var i Cocktail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsAlcoholic,
		&i.Glass,
		&i.Image,
		&i.Instructions,
		&i.Ingredients,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCocktail = `-- name: DeleteCocktail :exec
DELETE FROM cocktails 
WHERE id = $1
`

func (q *Queries) DeleteCocktail(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCocktail, id)
	return err
}

const getCocktail = `-- name: GetCocktail :one
SELECT id, name, is_alcoholic, glass, image, instructions, ingredients, created_at FROM cocktails
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCocktail(ctx context.Context, id uuid.UUID) (Cocktail, error) {
	row := q.db.QueryRow(ctx, getCocktail, id)
	var i Cocktail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsAlcoholic,
		&i.Glass,
		&i.Image,
		&i.Instructions,
		&i.Ingredients,
		&i.CreatedAt,
	)
	return i, err
}

const updateCocktail = `-- name: UpdateCocktail :one
UPDATE cocktails
SET name=$2, is_alcoholic=$3, glass=$4, image=$5, instructions=$6, ingredients=$7
WHERE id = $1
RETURNING id, name, is_alcoholic, glass, image, instructions, ingredients, created_at
`

type UpdateCocktailParams struct {
	ID           uuid.UUID          `json:"id"`
	Name         string             `json:"name"`
	IsAlcoholic  pgtype.Bool        `json:"is_alcoholic"`
	Glass        string             `json:"glass"`
	Image        string             `json:"image"`
	Instructions dto.InstructionDto `json:"instructions"`
	Ingredients  dto.IngredientDto  `json:"ingredients"`
}

func (q *Queries) UpdateCocktail(ctx context.Context, arg UpdateCocktailParams) (Cocktail, error) {
	row := q.db.QueryRow(ctx, updateCocktail,
		arg.ID,
		arg.Name,
		arg.IsAlcoholic,
		arg.Glass,
		arg.Image,
		arg.Instructions,
		arg.Ingredients,
	)
	var i Cocktail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsAlcoholic,
		&i.Glass,
		&i.Image,
		&i.Instructions,
		&i.Ingredients,
		&i.CreatedAt,
	)
	return i, err
}
