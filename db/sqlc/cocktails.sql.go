// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cocktails.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserCocktail = `-- name: CreateUserCocktail :one
INSERT INTO created_cocktails (
  name,
  image, 
  ingredients,
  instructions, 
  description,
  user_id
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, name, image, ingredients, instructions, description, user_id, created_at
`

type CreateUserCocktailParams struct {
	Name         string      `json:"name"`
	Image        string      `json:"image"`
	Ingredients  []byte      `json:"ingredients"`
	Instructions []byte      `json:"instructions"`
	Description  string      `json:"description"`
	UserID       pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateUserCocktail(ctx context.Context, arg CreateUserCocktailParams) (CreatedCocktail, error) {
	row := q.db.QueryRow(ctx, createUserCocktail,
		arg.Name,
		arg.Image,
		arg.Ingredients,
		arg.Instructions,
		arg.Description,
		arg.UserID,
	)
	var i CreatedCocktail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Ingredients,
		&i.Instructions,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserCocktail = `-- name: DeleteUserCocktail :exec
DELETE FROM created_cocktails 
WHERE id = $1
`

func (q *Queries) DeleteUserCocktail(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserCocktail, id)
	return err
}

const getUserCocktail = `-- name: GetUserCocktail :one
SELECT id, name, image, ingredients, instructions, description, user_id, created_at from created_cocktails 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserCocktail(ctx context.Context, id pgtype.UUID) (CreatedCocktail, error) {
	row := q.db.QueryRow(ctx, getUserCocktail, id)
	var i CreatedCocktail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Ingredients,
		&i.Instructions,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
