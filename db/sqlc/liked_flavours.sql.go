// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: liked_flavours.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getLikedFlavour = `-- name: GetLikedFlavour :one
select id, name, created_at, flavour_id, user_id from flavours f 
join liked_flavours lf ON f.id = lf.flavour_id 
where lf.user_id = $1 and lf.flavour_id = $2
group by lf.flavour_id, lf.user_id, f.id
`

type GetLikedFlavourParams struct {
	UserID    uuid.UUID `json:"user_id"`
	FlavourID uuid.UUID `json:"flavour_id"`
}

type GetLikedFlavourRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	FlavourID uuid.UUID `json:"flavour_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) GetLikedFlavour(ctx context.Context, arg GetLikedFlavourParams) (GetLikedFlavourRow, error) {
	row := q.db.QueryRow(ctx, getLikedFlavour, arg.UserID, arg.FlavourID)
	var i GetLikedFlavourRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.FlavourID,
		&i.UserID,
	)
	return i, err
}

const likeFlavour = `-- name: LikeFlavour :one
INSERT INTO liked_flavours (
  flavour_id,
  user_id
) VALUES (
  $1,
  $2
) RETURNING flavour_id, user_id
`

type LikeFlavourParams struct {
	FlavourID uuid.UUID `json:"flavour_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) LikeFlavour(ctx context.Context, arg LikeFlavourParams) (LikedFlavour, error) {
	row := q.db.QueryRow(ctx, likeFlavour, arg.FlavourID, arg.UserID)
	var i LikedFlavour
	err := row.Scan(&i.FlavourID, &i.UserID)
	return i, err
}

const unlikeFlavour = `-- name: UnlikeFlavour :exec
DELETE FROM liked_flavours 
WHERE flavour_id = $1 AND user_id = $2
`

type UnlikeFlavourParams struct {
	FlavourID uuid.UUID `json:"flavour_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) UnlikeFlavour(ctx context.Context, arg UnlikeFlavourParams) error {
	_, err := q.db.Exec(ctx, unlikeFlavour, arg.FlavourID, arg.UserID)
	return err
}
