// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: flavours.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFlavour = `-- name: CreateFlavour :one
INSERT INTO flavours (
  name
) VALUES (
  $1
) RETURNING id, name, created_at
`

func (q *Queries) CreateFlavour(ctx context.Context, name string) (Flavour, error) {
	row := q.db.QueryRow(ctx, createFlavour, name)
	var i Flavour
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteFlavour = `-- name: DeleteFlavour :exec
DELETE FROM flavours 
WHERE id = $1
`

func (q *Queries) DeleteFlavour(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFlavour, id)
	return err
}

const getFlavourId = `-- name: GetFlavourId :one
SELECT id, name, created_at FROM flavours
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFlavourId(ctx context.Context, id pgtype.UUID) (Flavour, error) {
	row := q.db.QueryRow(ctx, getFlavourId, id)
	var i Flavour
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getFlavourName = `-- name: GetFlavourName :one
SELECT id, name, created_at FROM flavours
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetFlavourName(ctx context.Context, name string) (Flavour, error) {
	row := q.db.QueryRow(ctx, getFlavourName, name)
	var i Flavour
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const updateFlavour = `-- name: UpdateFlavour :one
UPDATE flavours
SET name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateFlavourParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateFlavour(ctx context.Context, arg UpdateFlavourParams) (Flavour, error) {
	row := q.db.QueryRow(ctx, updateFlavour, arg.ID, arg.Name)
	var i Flavour
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
