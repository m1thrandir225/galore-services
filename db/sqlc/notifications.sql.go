// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notifications.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
  user_id,
  notification_type
) VALUES (
  $1,
  $2
) RETURNING id, user_id, notification_type, opened, created_at
`

type CreateNotificationParams struct {
	UserID           uuid.UUID `json:"user_id"`
	NotificationType uuid.UUID `json:"notification_type"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.UserID, arg.NotificationType)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotificationType,
		&i.Opened,
		&i.CreatedAt,
	)
	return i, err
}

const getUserNotifications = `-- name: GetUserNotifications :many
SELECT id, user_id, notification_type, opened, created_at FROM notifications 
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserNotifications(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getUserNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NotificationType,
			&i.Opened,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserNotification = `-- name: UpdateUserNotification :one
UPDATE notifications
  SET opened = $2
  WHERE id = $1
  RETURNING id, user_id, notification_type, opened, created_at
`

type UpdateUserNotificationParams struct {
	ID     uuid.UUID `json:"id"`
	Opened bool      `json:"opened"`
}

func (q *Queries) UpdateUserNotification(ctx context.Context, arg UpdateUserNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, updateUserNotification, arg.ID, arg.Opened)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotificationType,
		&i.Opened,
		&i.CreatedAt,
	)
	return i, err
}
