// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: liked_cocktails.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const likeCocktail = `-- name: LikeCocktail :one
INSERT INTO liked_cocktails (
  cocktail_id,
  user_id
) VALUES (
  $1,
  $2
) RETURNING cocktail_id, user_id
`

type LikeCocktailParams struct {
	CocktailID string    `json:"cocktail_id"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) LikeCocktail(ctx context.Context, arg LikeCocktailParams) (LikedCocktail, error) {
	row := q.db.QueryRow(ctx, likeCocktail, arg.CocktailID, arg.UserID)
	var i LikedCocktail
	err := row.Scan(&i.CocktailID, &i.UserID)
	return i, err
}

const unlikeCocktail = `-- name: UnlikeCocktail :exec
DELETE FROM liked_cocktails 
WHERE cocktail_id = $1 AND user_id = $2
`

type UnlikeCocktailParams struct {
	CocktailID string    `json:"cocktail_id"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) UnlikeCocktail(ctx context.Context, arg UnlikeCocktailParams) error {
	_, err := q.db.Exec(ctx, unlikeCocktail, arg.CocktailID, arg.UserID)
	return err
}
